
"fundamental autonomy" {
	error and error (X said Y on behalf of Z) if
		and X says (Y says Z)
		and diff {X Y}.
}

"no spurious violations" {
	error and error (Sayer introduced spurious violation X) if
		and Sayer says (violation X)
		and not X.
}

"sealing" {
	error and error (Sayer said X "which is sealed by untrusting" Sealer) if
		and Sealer says (sealed X)
		and Sayer says X
		and not Sealer says (Sayer may say X)
		and diff {Sealer Sayer}.
}

"planner" {
	sealed (X may work Y) if (X may work Y).
	sealed X if X and same {X (_ may work _)}.
}

"driver" {
	sealed (X R Y) if
		and (X R Y)
		and not diff {R --input---> --output-->}.
}

"defining involvement" {
	sealed X if X and same {X (_ may involve _)}.
	sealed X if X and same {X (_ involves _)}.

	"data ownership" may say X if X and same {X (_ may involve _)}.

	Thing involves Agent if
		and Thing may involve Agent
		and not opts out of involvement in Thing.

	Data may involve Agent if
		and Agent uploads Data.

	Task may involve Agent if
		and Data --input---> Task
		and Data involves Agent.

	Data may involve Agent if
		and Task --output--> Data
		and Task involves Agent.
}


"worker violation" {
	sealed X and violation X if
		and X
		and same {X (_ wrongly works _)}.



	violation(Agent wrongly works Task)
	and Agent wrongly works Task if
		and Agent works Task
		and not Agent may work Task.
}

"task predicates" {
	sealed X if X and not diff {X (task _) (_ is undone) (_ is done)}.

	task Task exists if ____ --input---> Task.
	task Task exists if Task --output--> ____.

	Task is done if _ works Task.

	Task is undone if
		and task Task exists
		and not Task is done.
}

"data ownership" {
	sealed X if X and same {X (_ evidently owns _)}.
	sealed X if X and same {X (_ may involve _)}.

	"defining involvement" may say X if X and same {X (_ may involve _)}.

	Agent evidently owns (Agent Suffix)
		if Agent uploads (Agent Suffix).

	Data may involve Agent if
		and Agent evidently owns Data.
}

"checker enumeration" {
	sealed X if X and same { X (checker _)}.
}


"authorization" {
	(violation (Agent did Task but Checker didn't authorize)) is sealed
		if violation (Agent did Task but Checker didn't authorize).

	violation X if X and same {X (_ did _ but _ didn't authorize)}.

	Agent did Task but Checker didn't authorize if
		and checker Checker
		and Task involves Checker
		and not Checker says Task is authorized
		and Agent works Task
		and diff {Agent Checker}.
}

////////////// EXAMPLE /////////////

"checker enumeration" {
	checker bob.
	checker amy.
}

driver {
	(amy 2) --input---> task1.
	(bob 1) --input---> task1.
	task1 --output--> new.
}

planner {
	bob may work task1.
	amy may work task1.
}

bob {
	//bob works task1.
	//amy works task1.
}

"showmanship haha get it?" {
	//show (X involves Y) if X involves Y.
	show (violation X) if violation X.
	show (error X) if error X.
	show (X assumes Y is false) if X assumes Y is false.
	//show (X authorizes Y) if (X authorizes Y).
	//show (X uploads Y) if (X uploads Y).
	//show (X works Y) if (X works Y).
	//show (checker X) if (checker X).
}